# This file prepares a win32 distribution

# Require needed to generate the temporary ruby file that produces the executable
require 'tmpdir'

module RubyPackager

  class PlatformReleaser

    PLATFORM_DIR = File.dirname(__FILE__)

    # Check if the tools we will use to generate an executable are present
    #
    # Parameters::
    # * *iRootDir* (_String_): Root directory
    # * *iIncludeRuby* (_Boolean_): Do we include Ruby in the release ?
    # * *iNeedBinaryCompilation* (_Boolean_): Do we need to compile RB files into a binary executable ?
    # Return::
    # * _Boolean_: Are tools correctly useable ?
    def check_exe_tools(iRootDir, iIncludeRuby, iNeedBinaryCompilation)
      rSuccess = true

      if (iIncludeRuby)
        # We need allinoneruby
        if (Gem.find_files('allinoneruby').empty?)
          log_err "Need to have allinoneruby gem to release including Ruby.\nPlease install allinoneruby gem (gem install allinoneruby)."
          rSuccess = false
        end
      end
      if (iNeedBinaryCompilation)
        # Check that edicon is present
        if (!File.exists?("#{PLATFORM_DIR}/edicon/edicon.exe"))
          log_err "Need to have edicon.exe installed in #{PLATFORM_DIR}/edicon to set a Windows executable's icon.\nPlease install edicon, part of Ocra Gem (gem install ocra), and copy from the Gem directory (ocra-1.1.1/share/ocra/edicon.exe) to #{PLATFORM_DIR}/edicon/edicon.exe."
          rSuccess = false
        end
        # Check that exerb is present
        if (system('exerb.bat --version') == nil)
          log_err "Need to have exerb installed in the system PATH to create a Windows executable.\nPlease download and install exerb from http://exerb.sourceforge.jp/index.en.html"
          rSuccess = false
        end
      end

      return rSuccess
    end

    # Create the binary.
    # This is called when the core library has been copied in the release directory.
    #
    # Parameters::
    # * *iRootDir* (_String_): Root directory
    # * *iReleaseDir* (_String_): Release directory
    # * *iIncludeRuby* (_Boolean_): Do we include Ruby in the release ?
    # * *iExecutableInfo* (<em>map<Symbol,Object></em>): The executable information
    # Return::
    # * _Boolean_: Success ?
    def create_binary(iRootDir, iReleaseDir, iIncludeRuby, iExecutableInfo)
      rSuccess = true

      lBinSubDir = "Launch/#{PLATFORM_ID}/bin"
      lRubyBaseBinName = nil
      lRubyLaunchCmd = nil
      if (iExecutableInfo[:terminal_application])
        lRubyBaseBinName = 'ruby'
        lRubyLaunchCmd = 'ruby'
      else
        lRubyBaseBinName = 'rubyw'
        lRubyLaunchCmd = 'start rubyw'
      end
      lBinName = "#{lRubyBaseBinName}-#{RUBY_VERSION}.exe"
      if (iIncludeRuby)
        # First create the binary containing all ruby
        lBinDir = "#{iReleaseDir}/#{lBinSubDir}"
        FileUtils::mkdir_p(lBinDir)
        change_dir(lBinDir) do
          lCmd = nil
          if (iExecutableInfo[:terminal_application])
            lCmd = "allinoneruby.bat #{lBinName}"
          else
            lCmd = "allinoneruby.bat --rubyw #{lBinName}"
          end
          rSuccess = system(lCmd)
          if (!rSuccess)
            log_err "Error while executing \"#{lCmd}\""
          end
        end
      end
      if (rSuccess)
        # Then create the real executable
        # Generate the Ruby file that launches everything for Windows
        lTempFileName = "#{Dir.tmpdir}/EXE_#{PLATFORM_ID}_Gen.rb"
        File.open(lTempFileName, 'w') do |oFile|
          oFile << "
\#--
\# Copyright (c) 2009 - 2012 Muriel Salvan (muriel@x-aeon.com)
\# Licensed under the terms specified in LICENSE file. No warranty is provided.
\#++

\# This file is generated by RubyPackager for Windows.
\# This is a temporary file that should not exist anymore once the release has been done.

\# This file has to launch the correct binary. There can be several binaries dependending on the configuration.
\# This is the file that will be created as the executable to launch.

module RubyPackager

  \# Execute a shell command
  \#
  \# Parameters::
  \# * *iCmd* (_String_): The shell command to execute
  \# Return::
  \# * _Boolean_: Success ?
  def self.shellExecute(iCmd)
    puts \"> \#{iCmd}\"
    rSuccess = system(iCmd)

    if (!rSuccess)
      puts \"Error while executing '\#{iCmd}'\"
    end

    return rSuccess
  end

end

\# Test if Ruby is installed
lSuccess = false
lCurrentDir = Dir.getwd
if (system('#{lRubyBaseBinName} --version'))
  \# Launch directly
  puts \"Ruby found in environment. Using it directly.\"
  lSuccess = RubyPackager::shellExecute(\"#{lRubyLaunchCmd} -w \\\"\#{lCurrentDir}/#{iExecutableInfo[:startup_rb_file]}\\\" \#{ARGV.join(' ')}\")
end
if (!lSuccess)
  \# Use allinoneruby
  puts \"Ruby not found in environment. Using shipped Ruby.\"
  lSuccess = RubyPackager::shellExecute(\"start \\\"Title\\\" \\\"\#{lCurrentDir}/#{lBinSubDir}/#{lBinName}\\\" \\\"\#{lCurrentDir}/#{iExecutableInfo[:startup_rb_file]}\\\" \#{ARGV.join(' ')}\")
  if (!lSuccess)
    puts 'Unable to execute the application. Please reinstall it.'
    puts 'Hit enter to quit.'
    $stdin.gets
  end
end
"
        end
        change_dir(iReleaseDir) do
          rSuccess = system("exerb.bat -o #{iExecutableInfo[:exe_name]}.exe #{lTempFileName}")
        end
        if (rSuccess)
          File.unlink(lTempFileName)
          # And set its icon
          lEdiconCmd = "#{PLATFORM_DIR}/edicon/edicon.exe #{iReleaseDir}/#{iExecutableInfo[:exe_name]}.exe #{iRootDir}/#{iExecutableInfo[:icon_name]}"
          rSuccess = system(lEdiconCmd)
          if (!rSuccess)
            log_err "Error while executing \"#{lEdiconCmd}\""
          end
        else
          log_err "Error while executing \"exerb.bat -o #{iExecutableInfo[:exe_name]}.exe #{lTempFileName}\""
        end
      end

      return rSuccess
    end

  end

end
