#--
# Copyright (c) 2009 Muriel Salvan (murielsalvan@users.sourceforge.net)
# Licensed under the terms specified in LICENSE file. No warranty is provided.
#++

# This file prepares a win32 distribution

# Require needed to generate the temporary ruby file that produces the executable
require 'tmpdir'

module RubyPackager

  class PlatformReleaser

    PLATFORM_DIR = File.dirname(__FILE__)

    # Check if the tools we will use to generate an executable are present
    #
    # Parameters:
    # * *iRootDir* (_String_): Root directory
    # * *iIncludeRuby* (_Boolean_): Do we include Ruby in the release ?
    # Return:
    # * _Boolean_: Are tools correctly useable ?
    def checkExeTools(iRootDir, iIncludeRuby)
      rSuccess = true

      if (iIncludeRuby)
        # We need allinoneruby
        if (Gem.find_files('allinoneruby').empty?)
          logErr "Need to have allinoneruby gem to release including Ruby.\nPlease install allinoneruby gem (gem install allinoneruby)."
          rSuccess = false
        end
      end
      # Check that edicon is present
      if (!File.exists?("#{PLATFORM_DIR}/edicon/edicon.exe"))
        logErr "Need to have edicon.exe installed in #{PLATFORM_DIR}/edicon to set a Windows executable's icon.\nPlease install edicon, part of Ocra Gem (gem install ocra), and copy from the Gem directory (ocra-1.1.1/share/ocra/edicon.exe) to #{PLATFORM_DIR}/edicon/edicon.exe."
        rSuccess = false
      end
      # Check that exerb is present
      if (!system('exerb.bat --version'))
        logErr "Need to have exerb installed in the system PATH to create a Windows executable.\nPlease download and install exerb from http://exerb.sourceforge.jp/index.en.html"
        rSuccess = false
      end

      return rSuccess
    end

    # Create the binary.
    # This is called when the core library has been copied in the release directory.
    #
    # Parameters:
    # * *iRootDir* (_String_): Root directory
    # * *iReleaseDir* (_String_): Release directory
    # * *iIncludeRuby* (_Boolean_): Do we include Ruby in the release ?
    # * *iReleaseInfo* (_ReleaseInfo_): The release information
    # Return:
    # * _Boolean_: Success ?
    def createBinary(iRootDir, iReleaseDir, iIncludeRuby, iReleaseInfo)
      rSuccess = true

      lBinSubDir = "Launch/#{RUBY_PLATFORM}/bin"
      lRubyBaseBinName = nil
      lRubyLaunchCmd = nil
      if (iReleaseInfo.ExecutableInfo[:TerminalApplication])
        lRubyBaseBinName = 'ruby'
        lRubyLaunchCmd = 'ruby'
      else
        lRubyBaseBinName = 'rubyw'
        lRubyLaunchCmd = 'start rubyw'
      end
      lBinName = "#{lRubyBaseBinName}-#{RUBY_VERSION}.exe"
      if (iIncludeRuby)
        # First create the binary containing all ruby
        lBinDir = "#{iReleaseDir}/#{lBinSubDir}"
        FileUtils::mkdir_p(lBinDir)
        lOldDir = Dir.getwd
        Dir.chdir(lBinDir)
        lCmd = nil
        if (iReleaseInfo.ExecutableInfo[:TerminalApplication])
          lCmd = "allinoneruby.bat #{lBinName}"
        else
          lCmd = "allinoneruby.bat --rubyw #{lBinName}"
        end
        rSuccess = system(lCmd)
        if (!rSuccess)
          logErr "Error while executing \"#{lCmd}\""
        end
        Dir.chdir(lOldDir)
      end
      if (rSuccess)
        # Then create the real executable
        # Generate the Ruby file that launches everything for Windows
        lTempFileName = "#{Dir.tmpdir}/EXE_#{RUBY_PLATFORM}_Gen.rb"
        File.open(lTempFileName, 'w') do |oFile|
          oFile << "
\#--
\# Copyright (c) 2009 Muriel Salvan (murielsalvan@users.sourceforge.net)
\# Licensed under the terms specified in LICENSE file. No warranty is provided.
\#++

\# This file is generated by RubyPackager for Windows.
\# This is a temporary file that should not exist anymore once the release has been done.

\# This file has to launch the correct binary. There can be several binaries dependending on the configuration.
\# This is the file that will be created as the executable to launch.

module RubyPackager

  \# Execute a shell command
  \#
  \# Parameters:
  \# * *iCmd* (_String_): The shell command to execute
  \# Return:
  \# * _Boolean_: Success ?
  def self.shellExecute(iCmd)
    puts \"> \#{iCmd}\"
    rSuccess = system(iCmd)

    if (!rSuccess)
      puts \"Error while executing '\#{iCmd}'\"
    end

    return rSuccess
  end

end

\# Test if Ruby is installed
lSuccess = false
lCurrentDir = Dir.getwd
if (system('#{lRubyBaseBinName} --version'))
  \# Launch directly
  puts \"Ruby found in environment. Using it directly.\"
  lSuccess = RubyPackager::shellExecute(\"#{lRubyLaunchCmd} -w \\\"\#{lCurrentDir}/#{iReleaseInfo.ExecutableInfo[:StartupRBFile]}\\\" \#{ARGV.join(' ')}\")
end
if (!lSuccess)
  \# Use allinoneruby
  puts \"Ruby not found in environment. Using shipped Ruby.\"
  lSuccess = RubyPackager::shellExecute(\"start \\\"Title\\\" \\\"\#{lCurrentDir}/#{lBinSubDir}/#{lBinName}\\\" \\\"\#{lCurrentDir}/#{iReleaseInfo.ExecutableInfo[:StartupRBFile]}\\\" \#{ARGV.join(' ')}\")
  if (!lSuccess)
    puts 'Unable to execute the application. Please reinstall it.'
    puts 'Hit enter to quit.'
    $stdin.gets
  end
end
"
        end
        lOldDir = Dir.getwd
        Dir.chdir(iReleaseDir)
        rSuccess = system("exerb.bat -o #{iReleaseInfo.ExecutableInfo[:ExeName]}.exe #{lTempFileName}")
        Dir.chdir(lOldDir)
        if (rSuccess)
          File.unlink(lTempFileName)
          # And set its icon
          lEdiconCmd = "#{PLATFORM_DIR}/edicon/edicon.exe #{iReleaseDir}/#{iReleaseInfo.ExecutableInfo[:ExeName]}.exe #{iRootDir}/#{iReleaseInfo.ExecutableInfo[:IconName]}"
          rSuccess = system(lEdiconCmd)
          if (!rSuccess)
            logErr "Error while executing \"#{lEdiconCmd}\""
          end
        else
          logErr "Error while executing \"exerb.bat -o #{iReleaseInfo.ExecutableInfo[:ExeName]}.exe #{lTempFileName}\""
        end
      end

      return rSuccess
    end

  end

end
